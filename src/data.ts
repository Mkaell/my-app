import {IItem} from  './interfaces'

const info:IItem[] = [
	{
		id:'0',
		code: 100, 
		info: 'Описание "Продолжить". Этот промежуточный ответ указывает, что запрос успешно принят и клиент может продолжать присылать запросы либо проигнорировать этот ответ, если запрос был завершён. ',
		name: 'Continue',

	},        
	{id: '1', code: 101, info: `"Переключение протокола". Этот код присылается в ответ на запрос клиента, содержащий заголовок Upgrade:, и указывает, что сервер переключился на протокол, который был указан в заголовке. Эта возможность позволяет перейти на несовместимую версию протокола и обычно не используется`, name: 'Switching Protocol'}, 
	{id:'2', code: 102, name:"Processing",  info: `"В обработке". Этот код указывает, что сервер получил запрос и обрабатывает его, но обработка ещё не завершена.	`},  
	{id:'3' , code: 103, name:'Early Hints', info: `"Ранние подсказки". В ответе сообщаются ресурсы, которые могут быть загружены заранее, пока сервер будет подготавливать основной ответ.`}
]
      
const success:IItem[] = [
	{
		id:'s0',
		code: 200, 
		info: `"Успешно". Запрос успешно обработан. Что значит "успешно", зависит от метода HTTP, который был запрошен:
		GET: "ПОЛУЧИТЬ". Запрошенный ресурс был найден и передан в теле ответа.
		HEAD: "ЗАГОЛОВОК". Заголовки переданы в ответе.
		POST: "ПОСЫЛКА". Ресурс, описывающий результат действия сервера на запрос, передан в теле ответа.
		TRACE: "ОТСЛЕЖИВАТЬ". Тело ответа содержит тело запроса полученного сервером.`,
		name: 'OK',
          
	}, 
	{id: 's1', code: 201, info: `"Создано". Запрос успешно выполнен и в результате был создан ресурс. Этот код обычно присылается в ответ на запрос PUT "ПОМЕСТИТЬ".`, name: 'Created'}, 
	{id:'s2', code: 202, name:"Accepted",  info: `"Принято". Запрос принят, но ещё не обработан. Не поддерживаемо, т.е., нет способа с помощью HTTP отправить асинхронный ответ позже, который будет показывать итог обработки запроса. Это предназначено для случаев, когда запрос обрабатывается другим процессом или сервером, либо для пакетной обработки.`},  
	{id:'s3' , code: 203, name:'Non-Authoritative Information', info: `"Информация не авторитетна". Этот код ответа означает, что информация, которая возвращена, была предоставлена не от исходного сервера, а из какого-нибудь другого источника. Во всех остальных ситуациях более предпочтителен код ответа 200 OK.`},
	{id:'s4' , code: 204, name:'No Content', info: `"Нет содержимого". Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются. Клиент может использовать их для обновления кешированных заголовков полученных ранее для этого ресурса.	`},
	{id:'s5' , code: 205, name:'Reset Content	', info: `"Сбросить содержимое". Этот код присылается, когда запрос обработан, чтобы сообщить клиенту, что необходимо сбросить отображение документа, который прислал этот запрос.`},
]

const client:IItem[] = [
	{
		id:'с0',
		code: 400, 
		info: `"Плохой запрос". Этот ответ означает, что сервер не понимает запрос из-за неверного синтаксиса.`,
		name: 'Bad Request',
	}, 
	{id: 'с1', code: 400, name: 'Created',  info: `""Неавторизованно". Для получения запрашиваемого ответа нужна аутентификация. Статус похож на статус 403, но,в этом случае, аутентификация возможна. 	`}, 
	{id:'с2', code: 401, name:"Unauthorized",  info: `"Принято". Запрос принят, но ещё не обработан. Не поддерживаемо, т.е., нет способа с помощью HTTP отправить асинхронный ответ позже, который будет показывать итог обработки запроса. Это предназначено для случаев, когда запрос обрабатывается другим процессом или сервером, либо для пакетной обработки.`},  
	{id:'с3' , code: 403, name:'Forbidden', info: `"Запрещено". У клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ. 	`},
	{id:'с4' , code: 404, name:'Not Found	', info: `Не найден". Сервер не может найти запрашиваемый ресурс. Код этого ответа, наверно, самый известный из-за частоты его появления в вебе`},
	{id:'с5' , code: 408, name:'Request Timeout		', info: `Ответ с таким кодом может прийти, даже без предшествующего запроса. Он означает, что сервер хотел бы отключить это неиспользуемое соединение. Этот метод используется все чаще с тех пор, как некоторые браузеры, вроде Chrome и IE9, стали использовать HTTP механизмы предварительного соединения для ускорения сёрфинга  (смотрите баг 634278, будущей реализации этого механизма в Firefox). Также учитывайте, что некоторые серверы прерывают соединения не отправляя подобных сообщений.	`},
]

const headers:IItem[] = [
	{
		id:'h0',
		info: 'Поле заголовка запроса Accept используется, чтобы определить тип информации, который должен содержаться в ответе HTTP сервера',
		name: 'Accept',
		example: 'Accept: text/plain; q=0.5, text/html'

	},        
	{id:'h1', name: 'Authorization',  info: 'Поле заголовка запроса Authorization используется для отправки данных авторизации на сервер', example: 'Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='},
	{id:'h2', name:'Content-Language', info: 'Поле заголовка запроса Content-Language указывает серверу на каком языке нужна информация (метки и тэги в HTTP), находящаяся в теле объекта.', example: 'Content-Language: mi, en'},
	{id:'h3', name:'Content-Type', info: 'Поле заголовка запроса Content-Language указывает серверу на каком языке нужна информация (метки и тэги в HTTP), находящаяся в теле объекта.', example: 'Content-Type: text/html;charset=utf-8'}
]
export {
	info, success, client, headers
}